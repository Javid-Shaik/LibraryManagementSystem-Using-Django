import os
"""
Django settings for LibraryManagementSystem project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from django.contrib import messages
from django.utils import timezone

# from decouple import os.environ.get

from dotenv import load_dotenv
load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR = os.path.join(BASE_DIR,"templates")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECRET_KEY
SECRET_KEY = os.environ.get('SECRET_KEY', default='secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [".onrender.com" ,"*"]


# Application definition

INSTALLED_APPS = [
    'django_redis',
    'my_app',
    'user_profile',
    'sslserver',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryManagementSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryManagementSystem.wsgi.application'

MESSAGE_TAGS = {
    messages.SUCCESS: 'success',  # This sets the class name for success messages
    messages.ERROR: 'error', #This sets the class name for error messages
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR ,'static')
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

AUTH_USER_MODEL = 'my_app.RegisterModel'

MEDIA_URL = '/media/'
DEFFAULT_USER_IMAGE = r"LibraryManagementSystem\\media\\profile\\default_user.jpg"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

LOGIN_URL = "/login"
LOGIN_REDIRECT_URL = "/borrow_book"


# Caching mechanism

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Adjust the URL based on your Redis setup
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Optionally set CACHE_MIDDLEWARE_SECONDS to control cache timeout for views
CACHE_MIDDLEWARE_SECONDS = 60  # Cache timeout in seconds


#Email redentials setting

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST= os.environ.get("EMAIL_HOST")
EMAIL_PORT=os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER= os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD= os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS= os.environ.get("EMAIL_USE_TLS")

# Celery settings this is for sending mails asynchoronusly
if os.environ.get('RENDER_ENV') == 'production':
    # Running in Render.com production environment
    CELERY_BROKER_URL = 'redis://red-c6na6rjru51t7lilgs3g:6379/0'
    CELERY_RESULT_BACKEND = 'redis://red-c6na6rjru51t7lilgs3g:6379/0'
else:
    # Running locally
    CELERY_BROKER_URL = 'redis://localhost:6379/0'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

CELERY_BEAT_SCHEDULE = {
    'send-overdue-reminders': {
        'task': 'user_profile.tasks.send_overdue_reminders',
        'schedule': timezone.timedelta(days=1),  # Run daily
    },
    'send-upcoming-due-date-notifications': {
        'task': 'user_profile.tasks.send_upcoming_due_date_notifications',
        'schedule': timezone.timedelta(days=1),  # Run daily
    },
    'update-overdue-field': {
        'task': 'myapp.tasks.update_overdue_field',
        'schedule': timezone.timedelta(days=1),  # Run daily
    },
}




